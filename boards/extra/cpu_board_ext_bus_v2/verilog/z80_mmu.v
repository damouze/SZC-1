/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_RegisterFile
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
    input [(Bits-1):0] Din,
    input we,
    input [(AddrBits-1):0] Rw,
    input C,
    input [(AddrBits-1):0] Ra,
    input [(AddrBits-1):0] Rb,
    output [(Bits-1):0] Da,
    output [(Bits-1):0] Db
);

    reg [(Bits-1):0] memory[0:((1 << AddrBits)-1)];

    assign Da = memory[Ra];
    assign Db = memory[Rb];

    always @ (posedge C) begin
        if (we)
            memory[Rw] <= Din;
    end
endmodule


module DriverBus#(
    parameter Bits = 2
)
(
    input [(Bits-1):0] in,
    input sel,
    output [(Bits-1):0] out
);
    assign out = (sel == 1'b1)? in : {Bits{1'bz}};
endmodule

module z80_mmu (
  input [7:0] D_in,
  input CLK,
  input \~{IOWR} , // Write-enable.
  input [1:0] R_sel, // Register select.
  input \~{IORD} , // Read-enable.
  input A_14,
  input A_15,
  input \~{CS} ,
  output [7:0] D_out, // The data in the specific register.
  output MA_14,
  output MA_15,
  output MA_16,
  output MA_17,
  output MA_18,
  output MA_19,
  output MA_20,
  output MA_21
);
  wire wr;
  wire \~{clk} ;
  wire [1:0] s0;
  wire [7:0] s1;
  wire [7:0] s2;
  wire rd;
  assign s0[0] = A_14;
  assign s0[1] = A_15;
  assign wr = ~ (\~{IOWR}  | \~{CS} );
  assign \~{clk}  = ~ CLK;
  assign rd = ~ (\~{CS}  | \~{IORD} );
  DIG_RegisterFile #(
    .Bits(8),
    .AddrBits(2)
  )
  DIG_RegisterFile_i0 (
    .Din( D_in ),
    .we( wr ),
    .Rw( R_sel ),
    .C( \~{clk}  ),
    .Ra( R_sel ),
    .Rb( s0 ),
    .Da( s1 ),
    .Db( s2 )
  );
  DriverBus #(
    .Bits(8)
  )
  DriverBus_i1 (
    .in( s1 ),
    .sel( rd ),
    .out( D_out )
  );
  assign MA_14 = s2[0];
  assign MA_15 = s2[1];
  assign MA_16 = s2[2];
  assign MA_17 = s2[3];
  assign MA_18 = s2[4];
  assign MA_19 = s2[5];
  assign MA_20 = s2[6];
  assign MA_21 = s2[7];
endmodule
